DROP TABLE PRODUCT;
CREATE TABLE PRODUCT(
    PCODE CHAR(6), -- 상품코드
    PNAME VARCHAR2(12) NOT NULL, -- 상품명
    PCOMPANY VARCHAR(12), --제조사
    PPRICE NUMBER(8), -- 가격
    STOCK NUMBER DEFAULT 0, -- 재고 수량
    CONSTRAINT PRODUCT_PK PRIMARY KEY(PCODE)
);
CREATE TABLE RECEIVING(
    RNO NUMBER(6),
    PCODE CHAR(6),
    RDATE DATE DEFAULT SYSDATE,
    RQTY NUMBER(6),
    RPRICE NUMBER(8),
    RAMOUNT NUMBER(8),
    CONSTRAINT RECEIVING_PK PRIMARY KEY(RNO),
    CONSTRAINT RECEIVING_FK FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE)
);

INSERT INTO PRODUCT(PCODE,PNAME,PCOMPANY,PPRICE)
VALUES('A00001','세탁기','LG',1500000);
INSERT INTO PRODUCT(PCODE,PNAME,PCOMPANY,PPRICE)
VALUES('A00002','컴퓨터','LG',1000000);
INSERT INTO PRODUCT(PCODE,PNAME,PCOMPANY,PPRICE)
VALUES('A00003','냉장고','삼성',4500000);

CREATE OR REPLACE TRIGGER TRG_IN
AFTER INSERT ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK + :NEW.RQTY -- 재고수량 = 재고수량 + 입고수량
    WHERE PCODE = :NEW.PCODE;
END;
/
INSERT INTO RECEIVING(RNO,PCODE,RQTY,RPRICE,RAMOUNT)
VALUES(1,'A00001',5,850000,950000);

SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

INSERT INTO RECEIVING(RNO,PCODE,RQTY,RPRICE,RAMOUNT)
VALUES(2,'A00002',10,680000,780000);
SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

INSERT INTO RECEIVING(RNO,PCODE,RQTY,RPRICE,RAMOUNT)
VALUES(3,'A00003',10,250000,300000);
SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

CREATE OR REPLACE TRIGGER TRG_UP
AFTER UPDATE ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK +(-:OLD.RQTY+:NEW.RQTY)
    WHERE PCODE = :NEW.PCODE;
END;
/

UPDATE RECEIVING SET RQTY= 8, RAMOUNT= 280000 -- 입고수량과 입고금액
WHERE RNO = 3;

SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

CREATE OR REPLACE TRIGGER TRG_DEL
AFTER DELETE ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK -:OLD.RQTY
    WHERE PCODE = :OLD.PCODE;
END;
/

DELETE RECEIVING WHERE RNO = 3;
SELECT * FROM RECEIVING;

SELECT * FROM PRODUCT;

CREATE OR REPLACE FUNCTION GETDNAME(V_DEPTNO IN EMPLOYEES.DEPARTMENT_ID%TYPE)
RETURN VARCHAR2
IS
    V_DNAME VARCHAR2(50);
    V_CNT NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO V_CNT FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = V_DEPTNO;
    
    IF
        V_CNT = 0 THEN
        V_DNAME := '해당 부서 없음';
    ELSE
        SELECT DEPARTMENT_NAME INTO V_DNAME FROM DEPARTMENTS
        WHERE DEPARTMENT_ID = V_DEPTNO;
    
    END IF;
    RETURN V_DNAME;
END;
/

SELECT FIRST_NAME, JOB_ID, NVL(COMMISSION_PCT,0), SALARY, GETDNAME(DEPARTMENT_ID)
DEPARTMENT_NAME
FROM EMPLOYEES
WHERE FIRST_NAME = 'Steven';

VARIABLE VDNAME VARCHAR2;
EXECUTE :VDNAME := GETDNAME(15);
PRINT VDNAME;

CREATE OR REPLACE FUNCTION GETAVGDEPT(V_DEPTNO IN EMPLOYEES.DEPARTMENT_ID%TYPE)
RETURN VARCHAR2
IS
    V_AVGSAL VARCHAR2(50);
BEGIN
    SELECT TO_CHAR(ROUND(AVG(SALARY)),'9999999') INTO V_AVGSAL
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = V_DEPTNO;
    RETURN V_AVGSAL;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    V_AVGSAL := '해당 부서 없음';
    RETURN V_AVGSAL;
END;
/
SELECT FIRST_NAME,SALARY,GETDNAME(DEPARTMENT_ID) DEPARTMENT_NAME,
GETAVGDEPT(DEPARTMENT_ID) AVG_SALARY
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 190;

CREATE TABLE SUNG(
    hakbun NUMBER(4),
    hakname VARCHAR2(20)NOT NULL,
    kor NUMBER(4)NOT NULL,
    eng NUMBER(4)NOT NULL,
    mat NUMBER(4)NOT NULL,
    tot NUMBER(4),
    ave NUMBER(5,1),
    rank NUMBER(4)
);
ALTER TABLE sung
ADD CONSTRAINT hakbun_PK PRIMARY KEY (hakbun);
DESC SUNG;
SELECT hakbun,hakname,kor,eng,mat,tot,ave,rank
--테이블에 학번이름국어영어수학점수를 입력하면
--총점과 평균이 자동계산되어 입력되도록 프로시저를 작성해라.

--테이블에 학번이름국어영어수학점수를 입력하면
-- 총점과 평균이 자동계산되도록 트리거(SUNGCAL_TRG)를 작성해라

--등수(SUNG_RANK)를 구하는 저장프로시저를 작성하고
--이를 호출하여 등수가 제대로 구해지는지 확인하자.
--다음은 등수를 구하는 저장프로시저 SP_RANK가 성공적으로 작성되었다는
--가정 하에 실습한 결과이다.
EXECUTE SUNG_RANK
SELECT * FROM SUNG ORDER BY RANK ASC,KOR DESC, ENG DESC,MAT DESC;